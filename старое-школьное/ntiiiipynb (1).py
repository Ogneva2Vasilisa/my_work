# -*- coding: utf-8 -*-
"""NTIIIipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pbEWYbZel7RB65c_5YWX1b30Y0UzlgAS
"""

import cv2
image_file = "00.png"
img = cv2.imread(image_file)



from google.colab.patches import cv2_imshow
ret, threshold_image = cv2.threshold(img, 128, 255, cv2.THRESH_BINARY)
cv2_imshow(threshold_image)

import numpy as np
imgs = []
width= img.shape[1]
print(width)
for w in range (0,width,32):
  cropped = img[0:32, (w+0):(w+32)]
  imgs.append(cropped)
  cv2_imshow(cropped)

#print(imgs[0].shape)
for i in range(240,500):
  cv2_imshow(imgs[i])
#print(imgs[0][8][18][0])

x_train=np.ones((len(imgs),32,32), dtype=int)
for i in range(len(imgs)):
  for stroka in range(32):
    for stolb in range(32):
      x_train[i][stroka][stolb]=imgs[i][stroka][stolb][0]
print(x_train[0][8])

for i in range(len(imgs)):
  for stroka in range(32):
    x_train[i][stroka]=np.array(x_train[i][stroka])
#x_train=np.ndarray(list())
print(x_train[0], end='')
#simbols[0]

simbols = [ 0,1,2,3,0,4,5,1,6,7,8,20,10,11,5,12,6,2,13,6,2,14,15,14,24,0,13,3,0,4,32,9,0,17,18,13,20,18,32,0,8,4,22,9,9,
           0,8,15,23,1,24,4,8,10,7,15,20,10,22,9,26,13,24,22,9,0,4,15,27,24,28,23,27,14,15,12,0,0,24,7,13,17,27,1,4,9,8,17,14,32,9,8,0,2,
           9,14,6,9,9,10,14,22,22,12,9,0,24,10,9,0,14,9,10,0,22,20,14,28,13,0,28,24,0,8,4,14, 8,9,9,18,9,2,23,22,0,8,6,6,24,2,26,27,14,
           13,14,14,18,14,0,22,26,0,8,4,8,23,6,15,22,6,14,15,10,15,9,2,0,0,20,20,24,26,
           15,32,26,0,10,6,1,2,26,1,10,2,9,9,14,8,15,28,8,0,11,18,6,13,18,14,2,9,9,22,22,9,1,22,13,1,22,0,
           1,9,9,0,6,1,8,13,15,24,10,12,0,6,14,0,9,22,32,8,22,18,22, 18,12,14,28,11,13,14,27,22,20,1,20,27,17,
           9,2,13,9,12,26,24,4,14,8,22,15,22,1,8,14,0,
           5,14,14,0,9,2,24,2,22,2,1,7,4,8,22,0,
           1,8,0,12,26,28,14,22,9,8,24,6,8,4,2,22,20,10,
           9,0,8,27,17,22,9,4,13,22,9,1,15,0,22,0,2,18,
           1,0,24,2,14,11,7,4,1,0,0,14,18,9,10,18,14,9,18, 
           6,23,22,13,4,22,0
]
# это классы по порядку изображений из : 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 17 18 20 22 23 24 26 27 28 32
len(simbols)

for i in range(len(simbols)):
  cv2_imshow(imgs[i])
  print(i, simbols[i],end=' ')

#замена всех значений от 0 до 25
len(simbols)
for i in range (len(simbols)):
  if simbols[i]==26:simbols[i]=16
  elif simbols[i]==27:simbols[i]=19
  elif simbols[i]==28:simbols[i]=21
  elif simbols[i]==32:simbols[i]=25
  print (simbols[i], end=' ')

import keras
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Input, Dropout, BatchNormalization

model = keras.Sequential([
    Conv2D (32, (3,3), padding='same', activation='relu', input_shape=(32, 32, 1)),
    MaxPooling2D ((2, 2), strides=2),
    Dense(128, activation='relu'),
    Conv2D (64, (3,3), padding='same', activation='relu'),
    MaxPooling2D ((2, 2), strides=2),
    Flatten(),
    Dense(70, activation='relu'),
    Dense(34, activation='relu'),
    Dense(26,  activation='softmax')
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

model.fit(x_train[:340], np.array(simbols[:340]), batch_size=64,epochs=29,)

predictions = model.predict(x_train)
np.argmax(predictions[342])

for i in range(0,342):
  cv2_imshow(x_train[i])
  print(np.argmax(predictions[i]), 'должен быть' , simbols[i],', номер', i)

def Data (image_file):
#для других файлов, не теста обучения
  img = cv2.imread(image_file)
  ret, threshold_image = cv2.threshold(img, 128, 255, cv2.THRESH_BINARY)
  print(type(img))
  cv2_imshow(threshold_image)
  imgs = []
  width= img.shape[1]
  #print(width)
  for w in range (0,width,32):
    cropped = img[0:32, (w+0):(w+32)]
    imgs.append(cropped)
    #cv2_imshow(cropped)
  #print(imgs[0].shape)
  #for i in range(240,500):
    #cv2_imshow(imgs[i])
  #print(imgs[0][8][18][0])

  x_test=np.ones((len(imgs),32,32), dtype=int)
  for i in range(len(imgs)):
    for stroka in range(32):
      for stolb in range(32):
        x_test[i][stroka][stolb]=imgs[i][stroka][stolb][0]
  #print(x_test[0][8])

  for i in range(len(imgs)):
    for stroka in range(32):
      x_test[i][stroka]=np.array(x_test[i][stroka])
  #print(x_test[0], end='')
  return x_test

def predskazanie(x_train):
  predictions = model.predict(x_train)
  predict=[]
  otv=''
  bukvy = ['A' , 'B' , 'C' , 'D' , 'E' , 'F' , 'G' , 'H' , 'I' , 'J' , 'K' , 'L' , 'M' , 'N' , 'O' , 'P' , 'Q' , 'R' , 'S' , 'T' , 'U' , 'V' , 'W' , 'X' , 'Y' , 'Z']
  for i in range(len(predictions)):
    predict.append(np.argmax(predictions[i]))
    otv=otv+bukvy[predict[i]]
  otv=otv+'\n'
  return otv

my_file = open("OTVET.txt", "w")
for i in range(0,100):
  if i<10:
    S='0'+str(i)
  else:
    S=str(i)
  test_data = Data(S+".png")
  my_file.write(predskazanie(test_data))
my_file.close()

My_file = open("OTVET.txt", "r")
file = open('OTVET (9).txt', 'r')
k=0
while True:
    # считываем строку
    line = My_file.readline()
    line2 =file.readline()
    # прерываем цикл, если строка пустая
    if not line:
        break
    # выводим строку
    print(line.strip())
    if line!=line2:
      for i in range (len(line)):
        if line[i]!=line2[i]: print(line[i], '!=', line2[i],'\n')
    k=k+1
My_file.close()
print(k)

